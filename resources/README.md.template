# salt

"S-expressions for Actions with Logic Temporal"

An experimental tool to convert a subset of Clojure into TLA+. Although it is experimental it has been used to produce real, useful TLA+ specifications.

You might want to use this if you know Clojure and are writing TLA+ specifications. Specifically it provides:

* an interactive REPL based authoring experience
* facilities for automated unit tests of invariants and actions
* automatic formatting of resulting TLA+ code
* a mapping from TLA+ to Clojure concepts that may facilitate learning TLA+

To use it:
1. Write a specification using salt.
2. Evaluate the salt specification in the REPL as part of the development process.
3. Once it is ready to be run in the TLA+ Toolbox, invoke the salt transpiler to emit TLA+ code.
4. Run the resulting TLA+ specification in the TLA+ Toolbox to assess the temporal properties of the specification.

In your salt specification file require the salt language as:

```(:require [salt.lang :refer :all])```

From the Clojure REPL, transpile a salt source file into a TLA+ file using an incantation like this:

```(spit <tla+-filename> (salt.transpiler/transpile-text (slurp <salt-filename>)))```

Alternatively, the salt transpiler can be invoked from the command line:

```lein uberjar```

```java -cp target/salt-0.0.1-standalone.jar clojure.main -m salt.main <salt-filename>```

# Table of Contents

 * [Language Identifiers](#language-identifiers)  
 * [Clojure to TLA+ Concepts](#clojure-to-tla-concepts)
 * [Standard Modules](#standard-modules)
 * [Docs](#docs)
   * [Primitives](#primitives)
   * [Code Structure](#code-structure)
   * [Arithmetic](#arithmetic)
   * [Specs](#specs)
   * [Logic](#logic)
   * [Temporal Logic](#temporal-logic)
   * [Sets](#sets)
   * [Vectors](#vectors)
   * [Maps](#maps)
   * [Maps As Records](#maps-as-records)
   * [Maps As Tuples](#maps-as-tuples)
   * [Functions](#functions)
 * [Example Salt](#example-salt)
 * [Example TLA+](#example-tla)
 * [Change Log](#change-log)

# Language Identifiers

The following identifiers are reserved for the salt language.

Identifiers from the Clojure language:

```and```
```comment```
```cond```
```conj```
```contains?```
```count```
```def```
```defn```
```difference```
```expt```
```first```
```fn```
```if```
```intersection```
```into```
```let```
```ns```
```not```
```or```
```require```
```rest```
```select```
```str```
```subset?```
```superset?```
```union```

Identifiers from the Clojure language, whose semantics were modified to match TLA+:

```every?*```
```get*```
```map*```
```mod*```
```range*```

Identifiers that were added specifically to support transpiling, they are neither part of Clojure nor TLA+:

```always-```
```CHANGED-```
```defm-```
```eventually-```
```fm-```
```leads-to-```
```line-```
```maps-```
```subset-proper?```
```superset-proper?```
```VARS-```

Identifiers from the TLA+ language:

```==```
```=>```
```<=>```
```=```
```>```
```<```
```>=```
```<=```
```+```
```-```
```*```
```A```
```ASSUME```
```Cardinality```
```CHOOSE```
```CONSTANT```
```div```
```DOMAIN```
```E```
```EXCEPT```
```Nat```
```not=```
```UNCHANGED```
```UNION```
```SelectSeq```
```Seq```
```SF```
```SubSeq```
```SUBSET```
```VARIABLE```
```WF```
```X```

# Clojure to TLA Concepts

| Clojure | Clojure example | TLA+ | TLA+ example |
| --- | --- | --- | --- |
| set | ```#{1 2}```| set | ```{1, 2}``` |
| vector | ```[1 2]``` | tuple | ```<<1, 2>>``` |
| map | ```{1 10 2 20}``` | function | ```(1 :> 10 @@ 2 :> 20)```|
| map | ```{:a 10 :b 20}``` | record | ```[a \|-> 100, b \|-> 200]``` |
| function | ```(defn Add [x y] (+ 1 2))```| operator | ```Add( x, y ) == x + y```|
| lambda | ```(fn [x] (> x 2))``` | lambda in SelectSeq | ```LAMBDA  x: (x > 2)``` |
| lambda | ```#(* 2 %)``` | lambda in Except| ```@ * 2``` |

Technically a TLA+ operator is better understood as a Clojure macro rather than a Clojure function. However, since Clojure functions are easier to write and higher order functions are very natural to write, the decision was taken to model TLA+ operators as Clojure functions. This does not cause issues because the functions are never applied without having all of the variables bound, so that whether they are applied or structurally substituted at that point does not matter.

In a way TLA+ functions might be usefully considered as Clojure functions. But, of course Clojure maps can be used as Clojure functions.

# Standard Modules

Portions of some of the TLA+ standard modules have been implemented. They can be referenced from a salt file as follows:

```
  (:require [salt.lang :refer :all]
            [tlaplus.FiniteSets :refer :all]
            [tlaplus.Integers :refer :all]
            [tlaplus.Naturals :refer :all]
            [tlaplus.Sequences :refer :all])
```

The salt transpiler will detect these values in the salt source file and produce the corresponding EXTENDS statement in the TLA+ output.

# Docs

@docs


# Example Salt
The following is a full sample salt file:

```
@example-salt
```

# Example TLA
The following is a full sample TLA+ output produced by the salt file above:

```
@example-tla
```

# Change Log

2019/08/19 version 0.0.2 Introduced symbolic evaluator that evaluates where possible and then simplifies for testing action predicates.

# Copyright

Copyright (c) 2019, ViaSat Inc.
All rights reserved.

Redistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met:

Redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer.

Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution.

THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, PUNITIVE, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

